Spring 容器的 refresh()，创建并刷新：

1，prepareRefresh() 刷新前的预处理。
    1，initPropertySource()，初始化一些属性设置，子类自定义个性化的属性设置。
    2，getEnvironment().validateRequiredProperties()，属性校验合法性。
    3，earlyApplicationEvents（LinkedHashSet），用于保存容器中一些早期的事件。

2，obtainFreshBeanFactory()，获取 beanFactory。
    1，refreshBeanFactory()，刷新创建 bean 工厂（默认创建了一个 DefaultListableBeanFactory），并创建唯一 ID。
    2，getBeanFactory()，返回刚才创建的 DefaultListableBeanFactory 对象，并返回到上一层方法。

3，prepareBeanFactory(beanFactory)，bean 工厂的预准备工作，进行一些配置。
    1，设置 beanFactory 的类加载器，支持表达式解析器。
    2，添加 addBeanPostProcessor（bean 对象的后置处理器，即 ApplicationContextAwareProcessor）。
    3，ignoreDependencyInterface()，设置忽略的自动装配的接口。
    4，注册可以解析的自动装配（即可以自动注入的组件），registerResolvableDependency()。
    5，addBeanPostProcessor()，添加其他各种的后置处理器（Aspectj，environment，systemProperties，systemEnvironment）。

4，postProcessBeanFactory，bean 工厂的后置处理器。invoke/registerBeanPostProcessors，执行并注册 bean 工厂的后置。

=========================== 以上是 beanFactory 的创建及预准备工作 ======================================

5，invokeBeanFactoryPostProcessors，执行 bean 工厂的后置处理器方法，在工厂标准初始化之后执行的。该项操作包含了两个接口：
    BeanFactoryPostProcessors 和 BeanDefinitionRegistryPostProcessor（bean 实例定义并注册的后置处理器）。

    1，先执行 BeanDefinitionRegistryPostProcessor
    	1）、获取所有的BeanDefinitionRegistryPostProcessor；
    	2）、看先执行实现了PriorityOrdered优先级接口的BeanDefinitionRegistryPostProcessor、
    		postProcessor.postProcessBeanDefinitionRegistry(registry)
    	3）、在执行实现了Ordered顺序接口的BeanDefinitionRegistryPostProcessor；
    		postProcessor.postProcessBeanDefinitionRegistry(registry)
    	4）、最后执行没有实现任何优先级或者是顺序接口的BeanDefinitionRegistryPostProcessors；
    		postProcessor.postProcessBeanDefinitionRegistry(registry)

    2，再执行 BeanFactoryPostProcessor的方法
    	1）、获取所有的BeanFactoryPostProcessor
    	2）、看先执行实现了PriorityOrdered优先级接口的BeanFactoryPostProcessor、postProcessor.postProcessBeanFactory()
    	3）、在执行实现了Ordered顺序接口的BeanFactoryPostProcessor；postProcessor.postProcessBeanFactory()
    	4）、最后执行没有实现任何优先级或者是顺序接口的BeanFactoryPostProcessor；postProcessor.postProcessBeanFactory()

6，registerBeanPostProcessors(beanFactory)，注册 Bean的后置处理器，是用于拦截 bean 的创建过程。不同接口类型的 BeanPostProcessor
    在Bean 创建前后的执行时机是不一样的。
    BeanPostProcessor、
    DestructionAwareBeanPostProcessor（bean 的销毁方法的后置处理器）、
    InstantiationAwareBeanPostProcessor、
    SmartInstantiationAwareBeanPostProcessor、
    MergedBeanDefinitionPostProcessor【internalPostProcessors】、

    1，获取所有的 BeanPostProcessor，后置处理器默认都可以通过 PriorityOrdered、Ordered 接口来执行优先级。
    2，先注册 PriorityOrdered 优先级接口的，然后把每个 Bean 后置处理器添加到 BeanFactory 中，addBeanPostProcessor(postProcessor);
    3，再注册 Ordered 接口的
    4，最后注册没有实现任何优先级接口的
    5，最终注册 MergedBeanDefinitionPostProcessor；
    6，注册一个 ApplicationListenerDetector，用于在 Bean 创建完成后检查是否是 ApplicationListener，如果是则添加到 applicationContext，
        addApplicationListener((ApplicationListener<?>) bean);

7，initMessageSource()，初始化 MessageSource 组件（做国际化功能，消息绑定，消息解析）；
    1，获取BeanFactory
    2，看容器中是否有id为 messageSource，类型是 MessageSource 的组件，	如果有则赋值给 messageSource，如果没有则自己创建一个
        DelegatingMessageSource。MessageSource：取出国际化配置文件中的某个key的值；能按照区域信息获取；
    3，把创建好的 MessageSource 注册在容器中，以后获取国际化配置文件的值的时候，可以自动注入 MessageSource；
    	beanFactory.registerSingleton(MESSAGE_SOURCE_BEAN_NAME, this.messageSource);
    	MessageSource.getMessage(String code, Object[] args, String defaultMessage, Locale locale);

8，initApplicationEventMulticaster()，初始化事件派发器；
    1，获取 BeanFactory
    2，从 BeanFactory 中获取 applicationEventMulticaster 的 ApplicationEventMulticaster；
    3，如果上一步没有配置，则自己创建一个 SimpleApplicationEventMulticaster
    4，将创建的 ApplicationEventMulticaster 添加到 BeanFactory 中，以后其他组件直接自动注入。

9，onRefresh()，留给子容器（子类），子类重写这个方法，在容器刷新的时候可以自定义逻辑；

10，registerListeners()，给容器中将所有项目里面的 ApplicationListener 注册进来；
    1、从容器中拿到所有的 ApplicationListener
    2、将每个监听器添加到事件派发器中，getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName);
    3、派发之前步骤产生的事件；

11，finishBeanFactoryInitialization(beanFactory)，初始化所有剩下的单实例 bean；
    1、beanFactory.preInstantiateSingletons()，初始化剩下的单实例 bean
    	1）、获取容器中的所有 Bean，依次进行初始化和创建对象
    	2）、获取Bean的定义信息，RootBeanDefinition

    	3）、Bean不是抽象的，是单实例的，是懒加载；
    		1）、判断是否是 FactoryBean；是否是实现了 FactoryBean接口的Bean；
    		2）、不是工厂Bean。利用getBean(beanName)，创建对象
    			0、getBean(beanName)； ioc.getBean();
    			1、doGetBean(name, null, null, false);
    			2、先获取缓存中保存的单实例Bean。如果能获取到说明这个Bean之前被创建过（所有创建过的单实例Bean都会被缓存起来）
    				从private final Map<String, Object> singletonObjects = new ConcurrentHashMap<String, Object>(256);获取的
    			3、缓存中获取不到，开始 Bean的创建对象流程；
    			4、标记当前 bean已经被创建
    			5、获取 Bean的定义信息；
    			6、获取当前 Bean 依赖的其他 Bean，如果有按照 getBean()把依赖的 Bean 先创建出来。

    			7、启动单实例 Bean的创建流程；
    					1）、createBean(beanName, mbd, args);
    					2）、Object bean = resolveBeforeInstantiation(beanName, mbdToUse)，让BeanPostProcessor 先拦截返回
    					    代理对象。
    					    InstantiationAwareBeanPostProcessor：提前执行。先触发 postProcessBeforeInstantiation()，如果有
    					    返回值就触发 postProcessAfterInitialization()；
    					3）、如果 InstantiationAwareBeanPostProcessor 没有返回代理对象，则调用下一步（即第四步）。

    					4）、Object beanInstance = doCreateBean(beanName, mbdToUse, args)，创建 Bean：
    						 1）、创建Bean实例，createBeanInstance(beanName, mbd, args)，利用工厂方法或者对象的构造器创建出Bean实例；
    						 2）、applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);
    						 	  调用 MergedBeanDefinitionPostProcessor 的 postProcessMergedBeanDefinition(mbd, beanType, beanName);
    						 3）、Bean属性赋值，populateBean(beanName, mbd, instanceWrapper)。
    						    赋值之前：
    						 	1）、拿到InstantiationAwareBeanPostProcessor后置处理器，postProcessAfterInstantiation()；
    						 	2）、拿到InstantiationAwareBeanPostProcessor后置处理器，postProcessPropertyValues()；
    						 	开始赋值：
    						 	3）、应用Bean属性的值；为属性利用setter方法等进行赋值，applyPropertyValues(beanName, mbd, bw, pvs);

    						 4）、Bean初始化，initializeBean(beanName, exposedObject, mbd);
    						 	1）、执行Aware接口方法，invokeAwareMethods(beanName, bean)，执行xxxAware接口的方法（使得能够被容器通知）。
    						 		BeanNameAware\BeanClassLoaderAware\BeanFactoryAware
    						 	2）、执行后置处理器初始化之前，applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);
    						 		BeanPostProcessor.postProcessBeforeInitialization（）;
    						 	3）、执行初始化方法，invokeInitMethods(beanName, wrappedBean, mbd);
    						 		1）、是否是InitializingBean接口的实现；执行接口规定的初始化；
    						 		2）、是否自定义初始化方法；
    						 	4）、执行后置处理器初始化之后，applyBeanPostProcessorsAfterInitialization，
    						 		BeanPostProcessor.postProcessAfterInitialization()；
    						 5）、注册Bean的销毁方法；

    					5）、将创建的Bean添加到缓存中 singletonObjects。

    2，ioc容器就是这些Map；很多的Map里面保存了单实例Bean，环境信息等等。
    3，所有 Bean 都利用 getBean创建完成以后，检查所有 Bean是否实现了 SmartInitializingSingleton接口（Event事件接口），如果是就执行
        afterSingletonsInstantiated()；

12、finishRefresh()，完成BeanFactory的初始化创建工作；IOC容器就创建完成；
    1，initLifecycleProcessor()，初始化和生命周期有关的后置处理器。默认从容器中找是否有 LifecycleProcessor 的组件，如果没有
        就 new DefaultLifecycleProcessor() 并加入到容器。
        可以写一个 LifecycleProcessor 的实现类，能够在BeanFactory，void onRefresh(); void onClose() 方法时进行调用。

    2，getLifecycleProcessor().onRefresh()，	拿到前面定义的生命周期处理器（BeanFactory）；回调onRefresh()；
    3，publishEvent(new ContextRefreshedEvent(this))，发布容器刷新完成事件；
    4，liveBeansView.registerApplicationContext(this);


======总结===========

1，Spring容器在启动的时候，先会保存所有注册进来的Bean的定义信息；
    1）、xml注册bean；<bean>
    2）、注解注册Bean；@Service、@Component、@Bean、xxx

2，Spring容器会在合适的时机创建这些 Bean
    1）、用到这个bean的时候；利用getBean创建bean；创建好以后保存在容器中；
    2）、统一创建剩下所有的bean的时候；finishBeanFactoryInitialization()；

3，后置处理器；BeanPostProcessor
    1）、每一个bean创建完成，都会使用各种后置处理器进行处理；来增强bean的功能：
    	AutowiredAnnotationBeanPostProcessor：处理自动注入。
    	AnnotationAwareAspectJAutoProxyCreator：来做AOP功能。
    	xxx....
    	增强的功能注解：
    	AsyncAnnotationBeanPostProcessor：异步功能注解的后置处理器。
    	....

4，事件驱动模型：
    ApplicationListener；事件监听。
    ApplicationEventMulticaster；事件派发多播器。

5，Aware 接口介绍：
    Spring 的依赖注入的最大亮点就是所有的 bean对 spring容器的存在是没有意识的，我们可以将 spring 容器换成其他容器，并且 spring
    容器中的 bean 的耦合度也是极低的。
    但在实际开发中，我们经常要用到 spring容器本身的功用资源，所以 spring容器中的 bean 此时就要意识到容器的存在才能调用 spring
    所提供的资源。这就需要通过 spring aware 接口来实现具体的功能。
    Aware 接口是一个具有标识作用的超级接口，实现此接口的 bean就具有被 spring容器通知的能力，而被通知的方式就是通过回调。也就是
    说，直接或间接实现了这个接口的类，都具有被 spring容器通知的能力。
