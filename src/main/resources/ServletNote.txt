
WEB 的三大组件：servlet（包括 DispatcherServlet），filter，listener（它们都要在 web.xml 中进行配置的）。

而在 servlet3.0 版本以后，它提供了 web 的注解版的配置，而不用再使用 web.xml 进行配置了。并且为了防止 web 项目报错（报没有
web.xml 配置文件），需要在 maven-war-plugin 插件中配置 failOnMissingWebXml 为 false。

为了实现不通过web.xml 启动JavaEE项目，spring 容器提供了 javax.servlet.ServletContainerInitializer 接口。

需要注意的是，servlet3.0 是 JSR315 的规范，需要 tomcat7 及以上版本才能支持。
导入 servlet 3.0 的 jar包，在 project structure --> module --> dependencies 中加入 tomcat 的 library 包。


1、Servlet容器在启动时会扫描当前应用里面，每一个jar包的 ServletContainerInitializer 的实现。
2、并且 ServletContainerInitializer 的实现类，必须绑定在 META-INF/services/javax.servlet.ServletContainerInitializer 文件中。
    文件的内容就是 ServletContainerInitializer 实现类的全类名；

3、springMVC 对它的实现类是 SpringServletContainerInitializer（可察看 spring-web jar包下的文件配置），如果是自定义实现类的话，
    就需要绑定到 META-INF 的对应文件中（即上一步的说明）。
4、spring 应用一启动就会加载感兴趣的 WebApplicationInitializer 接口下的所有组件。并且为这些组件创建对象（前提是它们不是接口和
    抽象类）。WebApplicationInitializer 接口下有三个依次继承的抽象类，分别是：

    1、AbstractContextLoaderInitializer：创建根容器；createRootApplicationContext()；
    	1、AbstractDispatcherServletInitializer：
    			创建一个 web 的 ioc 容器：createServletApplicationContext();
    			创建了 DispatcherServlet：createDispatcherServlet()；
    			将创建的 DispatcherServlet 添加到 ServletContext 中，并提供一个映射方法用于自定义映射，getServletMappings();
    	    1、AbstractAnnotationConfigDispatcherServletInitializer：注解方式配置的 DispatcherServlet 初始化器
    			创建根容器：createRootApplicationContext()：getRootConfigClasses()，传入一个配置类。
    			创建 web 的 ioc 容器：createServletApplicationContext()：获取配置类 getServletConfigClasses();

总结：
容器在启动应用的时候，会扫描当前应用每一个jar包里面 META-INF/services/javax.servlet.ServletContainerInitializer 文件，查找
指定的实现类，启动并运行这个实现类的方法；传入感兴趣的类型（@HandlesTypes 指定的类型）；

以注解方式来启动 SpringMVC，继承 AbstractAnnotationConfigDispatcherServletInitializer，并实现抽象方法指定 DispatcherServlet
的配置信息。

ServletContainerInitializer；
@HandlesTypes；


Maven项目如何将自定义文件添加到META-INF目录下：
1.在src/main/resources（必须是资源文件夹）下创建META-INF文件夹，然后将文件放在META-INF下。
2.使用maven-jar-plugin插件，不让Maven打包时生成maven自己的描述文件，这样就maven就不会覆盖自定义的文件了。

<build>  
       <plugins>  
            <plugin>  
                <groupId>org.apache.maven.plugins</groupId>  
                <artifactId>maven-jar-plugin</artifactId>  
                <configuration>  
                    <archive>  
                        <addMavenDescriptor>false</addMavenDescriptor>  
                    </archive>  
                </configuration>  
            </plugin>  
        </plugins>  
</build>  


在 servlet3.0 之前，servlet采用 Thread-Per-Request 的方式处理请求，即每一次 http 请求都由某一个线程从头到尾负责处理。
如果有一个请求需要进行 IO 操作，比如访问数据库，调用第三方接口等，那么其所对应的线程将同步地等待 IO 操作完成，而 IO 是非常慢的，
所以此时的线程并不能及时地释放回线程池以供后续使用，在并发量在时，这将带来严重的性能问题。而 spring 框架是建立在 servlet 之上的，
所以 springMVC 框架也会因此而产生性能问题。
因此 servlet3.0 引入了非阻塞 IO 来进一步增强异步处理的性能。